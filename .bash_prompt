
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" (${s})";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

reset="\[\e[0m\]";
black="\[\e[1;30m\]";
blue="\[\e[0;34m\]";
cyan="\[\e[1;36m\]";
green="\[\e[0;32m\]";
orange="\[\e[1;33m\]";
purple="\[\e[1;35m\]";
red="\[\e[0;31m\]";
violet="\[\e[1;35m\]";
white="\[\e[1;37m\]";
yellow="\[\e[1;33m\]";

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${green}";
fi;

if [[ "${USER}" == "christopheraziz" ]]; then
	uname="caziz"
else 
	uname="${USER}"
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="";
PS1+="${white}["; # [
PS1+="${userStyle}${uname}"; # username
# PS1+="\[${white}\] at ";
# PS1+="\[${hostStyle}\]\h"; # host
PS1+=" ${blue}\w"; # working directory full path
PS1+="\$(prompt_git \"${white} ${purple}\" \"${violet}\")"; # Git repository details
# PS1+="\n";
PS1+="${white}]\$ ${reset}"; # `$` (and reset color)
export PS1;

PS2="${white}→ ${reset}";
export PS2;
